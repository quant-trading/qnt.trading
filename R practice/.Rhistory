#DOWN acc:
res[1,1] / (res[1,1] + res[2,1])
??randomForest
tree.stk =rfcv(target~., sd, mtry = 2, importance = TRUE)
tree.stk =rfcv(target~., sd, importance = TRUE)
rfcv(sd$target, sd[,-1])
rfcv(sd$target, sd[,-1],  cv.fold=5)
rfcv(sd[,-1],sd$target,  cv.fold=5)
sd$target
result=rfcv(sd[,-1],sd$target,  cv.fold=5)
with(result, plot(n.var, error.cv, log="x", type="o", lwd=2))
tree.pred = predict.randomForest ( tree.stk , sd.test ,type ="class")
res =table ( tree.pred , sd.test$target)
#UP acc:
res[2,2] / (res[2,2] + res[1,2])
#DOWN acc:
res[1,1] / (res[1,1] + res[2,1])
tree.pred = predict.randomForest ( tree.stk , sd.test ,type ="class")
library(randomForest)
tree.pred = predict.randomForest ( tree.stk , sd.test ,type ="class")
??predict.randomForest
tree.pred = predict.randomForest ( tree.stk , sd.test)
tree.pred = predict ( tree.stk , sd.test)
res =table ( tree.pred , sd.test$target)
??predict.randomForest
#UP acc:
res[2,2] / (res[2,2] + res[1,2])
#DOWN acc:
res[1,1] / (res[1,1] + res[2,1])
??randomForest
result=rfcv(sd[,-1],sd$target,  cv.fold=10)
with(result, plot(n.var, error.cv, log="x", type="o", lwd=2))
CCI20<-CCI(Cl(STK),n=20)
DEMA10<-DEMA(Cl(STK),n = 10, v = 1, wilder = FALSE)
ts = buildData(target ~ Lag(RSI3) + Lag(RSI3_SP) + Lag(dV)+Lag(DEMA10) + Lag(CCI20), na.rm=TRUE)
library(randomForest)
sd = as.data.frame(ts)
names(sd) = c("target","RSI","RSI_SPY","DV")
attach(sd)
library(randomForest)
sd = as.data.frame(ts)
names(sd) = c("target","RSI","RSI_SPY","DV")
attach(sd)
sd$target = as.factor(ifelse(sd$target>0,1,0))
train = sample(1:nrow(ts), nrow(ts)*0.75)
sd.test=  sd [-train ,]
#ts.train = ts[train,]
tree.stk =randomForest(target~., sd , subset =train, mtry = 2, importance = TRUE)
#plot(tree.stk)
summary(tree.stk)
tree.stk$confusion
#?randomForest
tree.pred = predict ( tree.stk , sd.test)
res =table ( tree.pred , sd.test$target)
#??predict.randomForest
#UP acc:
res[2,2] / (res[2,2] + res[1,2])
#DOWN acc:
res[1,1] / (res[1,1] + res[2,1])
#??randomForest
result=rfcv(sd[,-1],sd$target,  cv.fold=10)
with(result, plot(n.var, error.cv, log="x", type="o", lwd=2))
res
#UP acc:
res[2,2] / (res[2,2] + res[1,2])
#DOWN acc:
res[1,1] / (res[1,1] + res[2,1])
tree.pred = predict ( tree.stk , sd.test)
res =table ( tree.pred , sd$target)
#??predict.randomForest
#UP acc:
res[2,2] / (res[2,2] + res[1,2])
#DOWN acc:
res[1,1] / (res[1,1] + res[2,1])
tree.pred = predict ( tree.stk , sd)
res =table ( tree.pred , sd$target)
#??predict.randomForest
#UP acc:
res[2,2] / (res[2,2] + res[1,2])
#DOWN acc:
res[1,1] / (res[1,1] + res[2,1])
1 - res[2,2] / (res[2,2] + res[1,2])
res[2,2] / (res[2,2] + res[1,2])
#DOWN acc:
res[1,1] / (res[1,1] + res[2,1])
#??randomForest
result=rfcv(sd[,-1],sd$target,  cv.fold=10)
with(result, plot(n.var, error.cv, log="x", type="o", lwd=2))
target = Delt(Cl(STK),Cl(STK),k=1)
target
library(quantmod)
# load Magnit data
STK <- getSymbols("MGNT.ME", env=NULL)
SPY <- getSymbols("SPY", env=NULL)
#charting
chartSeries(STK,name="Magnet, RUB")
addRSI(n=10)
RSI3<-RSI(Ad(STK),n=10)
RSI3 = ifelse(RSI3 > 80,1,ifelse(RSI3<20,-1,0))
CCI20<-CCI(Cl(STK),n=20)
DEMA10<-DEMA(Cl(STK),n = 10, v = 1, wilder = FALSE)
RSI3_SP<-RSI(Ad(SPY),n=10)
RSI3_SP = ifelse(RSI3_SP > 80,1,ifelse(RSI3_SP<20,-1,0))
Delt(Cl(STK),Cl(STK),k=1:3)
dV = Vo(STK) - Lag(Vo(STK))
#target = OpCl(STK)
target = Delt(Cl(STK),Cl(STK),k=1)
#quantile(OpCl(STK), probs = seq(0, 1, 0.25), na.rm = FALSE)
ts = buildData(target ~ Lag(RSI3) + Lag(RSI3_SP) + Lag(dV)+Lag(DEMA10) + Lag(CCI20), na.rm=TRUE)
#model = specifyModel(target ~ Lag(RSI3) + Lag(RSI3_SP) + Lag(dV), na.rm=TRUE)
#m.built = buildModel(model, method = "randomForest", training.per = c('2011-01-01','2016-09-05'))
#z =tradeModel(m.built, plot.model = TRUE)
#getModelData(m.built)
# build a simple model
library(randomForest)
sd = as.data.frame(ts)
names(sd) = c("target","RSI","RSI_SPY","DV")
attach(sd)
sd$target = as.factor(ifelse(sd$target>0,1,0))
train = sample(1:nrow(ts), nrow(ts)*0.75)
sd.test=  sd [-train ,]
#ts.train = ts[train,]
tree.stk =randomForest(target~., sd , subset =train, mtry = 2, importance = TRUE)
#plot(tree.stk)
summary(tree.stk)
tree.stk$confusion
#?randomForest
tree.pred = predict ( tree.stk , sd$test)
res =table ( tree.pred , sd.test$target)
#??predict.randomForest
#UP acc:
res[2,2] / (res[2,2] + res[1,2])
#DOWN acc:
res[1,1] / (res[1,1] + res[2,1])
#??randomForest
result=rfcv(sd[,-1],sd$target,  cv.fold=10)
with(result, plot(n.var, error.cv, log="x", type="o", lwd=2))
result <- replicate(5, rfcv(sd[,-1],sd$target,  cv.fold=10), simplify=FALSE)
error.cv <- sapply(result, "[[", "error.cv")
matplot(result[[1]]$n.var, cbind(rowMeans(error.cv), error.cv), type="l",
lwd=c(2, rep(1, ncol(error.cv))), col=1, lty=1, log="x",
xlab="Number of variables", ylab="CV Error")
plot(tree.stk$confusion)
tree.stk$confusion
276 / (333+276)
table ( tree.pred , sd.test$target)
res
#UP acc:
res[2,2] / (res[2,2] + res[1,2])
res[1,1] / (res[1,1] + res[2,1])
tree.pred = predict ( tree.stk , sd.test)
res =table ( tree.pred , sd.test$target)
#??predict.randomForest
#UP acc:
res[2,2] / (res[2,2] + res[1,2])
#DOWN acc:
res[1,1] / (res[1,1] + res[2,1])
res
tree.pred = predict ( tree.stk , sd)
res =table ( tree.pred , sd$target)
#??predict.randomForest
#UP acc:
res[2,2] / (res[2,2] + res[1,2])
#DOWN acc:
res[1,1] / (res[1,1] + res[2,1])
result=rfcv(sd[,-1],sd$target,  cv.fold=10)
with(result, plot(n.var, error.cv, log="x", type="o", lwd=2))
library(quantmod)
# load Magnit data
STK <- getSymbols("GAZP.ME", env=NULL)
SPY <- getSymbols("SPY", env=NULL)
#charting
chartSeries(STK,name="Magnet, RUB")
addRSI(n=10)
RSI3<-RSI(Ad(STK),n=10)
RSI3 = ifelse(RSI3 > 80,1,ifelse(RSI3<20,-1,0))
CCI20<-CCI(Cl(STK),n=20)
DEMA10<-DEMA(Cl(STK),n = 10, v = 1, wilder = FALSE)
RSI3_SP<-RSI(Ad(SPY),n=10)
RSI3_SP = ifelse(RSI3_SP > 80,1,ifelse(RSI3_SP<20,-1,0))
Delt(Cl(STK),Cl(STK),k=1:3)
dV = Vo(STK) - Lag(Vo(STK))
#target = OpCl(STK)
target = Delt(Cl(STK),Cl(STK),k=1)
#quantile(OpCl(STK), probs = seq(0, 1, 0.25), na.rm = FALSE)
ts = buildData(target ~ Lag(RSI3) + Lag(RSI3_SP) + Lag(dV)+Lag(DEMA10) + Lag(CCI20), na.rm=TRUE)
#model = specifyModel(target ~ Lag(RSI3) + Lag(RSI3_SP) + Lag(dV), na.rm=TRUE)
#m.built = buildModel(model, method = "randomForest", training.per = c('2011-01-01','2016-09-05'))
#z =tradeModel(m.built, plot.model = TRUE)
#getModelData(m.built)
# build a simple model
library(randomForest)
sd = as.data.frame(ts)
names(sd) = c("target","RSI","RSI_SPY","DV")
attach(sd)
sd$target = as.factor(ifelse(sd$target>0,1,0))
train = sample(1:nrow(ts), nrow(ts)*0.75)
sd.test=  sd [-train ,]
#ts.train = ts[train,]
tree.stk =randomForest(target~., sd , subset =train, mtry = 2, importance = TRUE)
#plot(tree.stk)
summary(tree.stk)
tree.stk$confusion
#?randomForest
# TEST
tree.pred = predict ( tree.stk , sd.test)
res =table ( tree.pred , sd.test$target)
#??predict.randomForest
#UP acc:
res[2,2] / (res[2,2] + res[1,2])
#DOWN acc:
res[1,1] / (res[1,1] + res[2,1])
# ALL
tree.pred = predict ( tree.stk , sd)
res =table ( tree.pred , sd$target)
#??predict.randomForest
#UP acc:
res[2,2] / (res[2,2] + res[1,2])
#DOWN acc:
res[1,1] / (res[1,1] + res[2,1])
#??randomForest
result=rfcv(sd[,-1],sd$target,  cv.fold=10)
with(result, plot(n.var, error.cv, log="x", type="o", lwd=2))
#result <- replicate(5, rfcv(sd[,-1],sd$target,  cv.fold=10), simplify=FALSE)
#error.cv <- sapply(result, "[[", "error.cv")
#matplot(result[[1]]$n.var, cbind(rowMeans(error.cv), error.cv), type="l",
#        lwd=c(2, rep(1, ncol(error.cv))), col=1, lty=1, log="x",
#        xlab="Number of variables", ylab="CV Error")
tree.stk =randomForest(target~., sd , subset =train, mtry = 2, importance = TRUE)
target
sd$target = as.factor(ifelse(sd$target>0,1,0))
tree.stk =randomForest(sd$target~., sd , subset =train, mtry = 2, importance = TRUE)
sd$target
library(quantmod)
# load Magnit data
STK <- getSymbols("GAZP.ME", env=NULL)
SPY <- getSymbols("SPY", env=NULL)
#charting
chartSeries(STK,name="Magnet, RUB")
addRSI(n=10)
RSI3<-RSI(Ad(STK),n=10)
RSI3 = ifelse(RSI3 > 80,1,ifelse(RSI3<20,-1,0))
CCI20<-CCI(Cl(STK),n=20)
DEMA10<-DEMA(Cl(STK),n = 10, v = 1, wilder = FALSE)
RSI3_SP<-RSI(Ad(SPY),n=10)
RSI3_SP = ifelse(RSI3_SP > 80,1,ifelse(RSI3_SP<20,-1,0))
Delt(Cl(STK),Cl(STK),k=1:3)
dV = Vo(STK) - Lag(Vo(STK))
#target = OpCl(STK)
target = Delt(Cl(STK),Cl(STK),k=1)
target
ts = buildData(target ~ Lag(RSI3) + Lag(RSI3_SP) + Lag(dV)+Lag(DEMA10) + Lag(CCI20), na.rm=TRUE)
library(randomForest)
sd = as.data.frame(ts)
names(sd) = c("target","RSI","RSI_SPY","DV")
attach(sd)
sd$target = as.factor(ifelse(sd$target>0,1,0))
sd$target
train = sample(1:nrow(ts), nrow(ts)*0.75)
sd.test=  sd [-train ,]
#ts.train = ts[train,]
tree.stk =randomForest(sd$target~., sd , subset =train, mtry = 2, importance = TRUE)
View(sd)
train
tree.stk =randomForest(sd$target~., sd , subset =train, mtry = 2, importance = TRUE)
sd
sd$target
library(quantmod)
# load Magnit data
STK <- getSymbols("CHFM.ME", env=NULL)
SPY <- getSymbols("SPY", env=NULL)
#charting
chartSeries(STK,name="Magnet, RUB")
addRSI(n=10)
RSI3<-RSI(Ad(STK),n=10)
RSI3 = ifelse(RSI3 > 80,1,ifelse(RSI3<20,-1,0))
CCI20<-CCI(Cl(STK),n=20)
DEMA10<-DEMA(Cl(STK),n = 10, v = 1, wilder = FALSE)
RSI3_SP<-RSI(Ad(SPY),n=10)
RSI3_SP = ifelse(RSI3_SP > 80,1,ifelse(RSI3_SP<20,-1,0))
Delt(Cl(STK),Cl(STK),k=1:3)
dV = Vo(STK) - Lag(Vo(STK))
#target = OpCl(STK)
target = Delt(Cl(STK),Cl(STK),k=1)
#quantile(OpCl(STK), probs = seq(0, 1, 0.25), na.rm = FALSE)
ts = buildData(target ~ Lag(RSI3) + Lag(RSI3_SP) + Lag(dV)+Lag(DEMA10) + Lag(CCI20), na.rm=TRUE)
#model = specifyModel(target ~ Lag(RSI3) + Lag(RSI3_SP) + Lag(dV), na.rm=TRUE)
#m.built = buildModel(model, method = "randomForest", training.per = c('2011-01-01','2016-09-05'))
#z =tradeModel(m.built, plot.model = TRUE)
#getModelData(m.built)
# build a simple model
library(randomForest)
sd = as.data.frame(ts)
names(sd) = c("target","RSI","RSI_SPY","DV")
attach(sd)
sd$target = as.factor(ifelse(sd$target>0,1,0))
train = sample(1:nrow(ts), nrow(ts)*0.75)
sd.test=  sd [-train ,]
#ts.train = ts[train,]
tree.stk =randomForest(sd$target~., sd , subset =train, mtry = 2, importance = TRUE)
#plot(tree.stk)
summary(tree.stk)
tree.stk$confusion
#?randomForest
# TEST
tree.pred = predict ( tree.stk , sd.test)
res =table ( tree.pred , sd.test$target)
#??predict.randomForest
#UP acc:
res[2,2] / (res[2,2] + res[1,2])
#DOWN acc:
res[1,1] / (res[1,1] + res[2,1])
# ALL
tree.pred = predict ( tree.stk , sd)
res =table ( tree.pred , sd$target)
#??predict.randomForest
#UP acc:
res[2,2] / (res[2,2] + res[1,2])
#DOWN acc:
res[1,1] / (res[1,1] + res[2,1])
#??randomForest
result=rfcv(sd[,-1],sd$target,  cv.fold=10)
with(result, plot(n.var, error.cv, log="x", type="o", lwd=2))
#result <- replicate(5, rfcv(sd[,-1],sd$target,  cv.fold=10), simplify=FALSE)
#error.cv <- sapply(result, "[[", "error.cv")
#matplot(result[[1]]$n.var, cbind(rowMeans(error.cv), error.cv), type="l",
#        lwd=c(2, rep(1, ncol(error.cv))), col=1, lty=1, log="x",
#        xlab="Number of variables", ylab="CV Error")
library(quantmod)
# load Magnit data
STK <- getSymbols("VTBR.ME", env=NULL)
SPY <- getSymbols("SPY", env=NULL)
#charting
chartSeries(STK,name="Magnet, RUB")
addRSI(n=10)
RSI3<-RSI(Ad(STK),n=10)
RSI3 = ifelse(RSI3 > 80,1,ifelse(RSI3<20,-1,0))
CCI20<-CCI(Cl(STK),n=20)
DEMA10<-DEMA(Cl(STK),n = 10, v = 1, wilder = FALSE)
RSI3_SP<-RSI(Ad(SPY),n=10)
RSI3_SP = ifelse(RSI3_SP > 80,1,ifelse(RSI3_SP<20,-1,0))
Delt(Cl(STK),Cl(STK),k=1:3)
dV = Vo(STK) - Lag(Vo(STK))
#target = OpCl(STK)
target = Delt(Cl(STK),Cl(STK),k=1)
#quantile(OpCl(STK), probs = seq(0, 1, 0.25), na.rm = FALSE)
ts = buildData(target ~ Lag(RSI3) + Lag(RSI3_SP) + Lag(dV)+Lag(DEMA10) + Lag(CCI20), na.rm=TRUE)
#model = specifyModel(target ~ Lag(RSI3) + Lag(RSI3_SP) + Lag(dV), na.rm=TRUE)
#m.built = buildModel(model, method = "randomForest", training.per = c('2011-01-01','2016-09-05'))
#z =tradeModel(m.built, plot.model = TRUE)
#getModelData(m.built)
# build a simple model
library(randomForest)
sd = as.data.frame(ts)
names(sd) = c("target","RSI","RSI_SPY","DV")
attach(sd)
sd$target = as.factor(ifelse(sd$target>0,1,0))
train = sample(1:nrow(ts), nrow(ts)*0.75)
sd.test=  sd [-train ,]
#ts.train = ts[train,]
tree.stk =randomForest(sd$target~., sd , subset =train, mtry = 2, importance = TRUE)
#plot(tree.stk)
summary(tree.stk)
tree.stk$confusion
#?randomForest
# TEST
tree.pred = predict ( tree.stk , sd.test)
res =table ( tree.pred , sd.test$target)
#??predict.randomForest
#UP acc:
res[2,2] / (res[2,2] + res[1,2])
#DOWN acc:
res[1,1] / (res[1,1] + res[2,1])
# ALL
tree.pred = predict ( tree.stk , sd)
res =table ( tree.pred , sd$target)
#??predict.randomForest
#UP acc:
res[2,2] / (res[2,2] + res[1,2])
#DOWN acc:
res[1,1] / (res[1,1] + res[2,1])
#??randomForest
result=rfcv(sd[,-1],sd$target,  cv.fold=10)
with(result, plot(n.var, error.cv, log="x", type="o", lwd=2))
#result <- replicate(5, rfcv(sd[,-1],sd$target,  cv.fold=10), simplify=FALSE)
#error.cv <- sapply(result, "[[", "error.cv")
#matplot(result[[1]]$n.var, cbind(rowMeans(error.cv), error.cv), type="l",
#        lwd=c(2, rep(1, ncol(error.cv))), col=1, lty=1, log="x",
#        xlab="Number of variables", ylab="CV Error")
RSI3
library(quantmod)
# load Magnit data
STK <- getSymbols("VTBR.ME", env=NULL)
SPY <- getSymbols("SPY", env=NULL)
#charting
chartSeries(STK,name="Magnet, RUB")
addRSI(n=10)
RSI3<-RSI(Ad(STK),n=10)
#RSI3 = ifelse(RSI3 > 80,1,ifelse(RSI3<20,-1,0))
CCI20<-CCI(Cl(STK),n=20)
DEMA10<-DEMA(Cl(STK),n = 10, v = 1, wilder = FALSE)
RSI3_SP<-RSI(Ad(SPY),n=10)
#RSI3_SP = ifelse(RSI3_SP > 80,1,ifelse(RSI3_SP<20,-1,0))
Delt(Cl(STK),Cl(STK),k=1:3)
dV = Vo(STK) - Lag(Vo(STK))
#target = OpCl(STK)
target = Delt(Cl(STK),Cl(STK),k=1)
#quantile(OpCl(STK), probs = seq(0, 1, 0.25), na.rm = FALSE)
ts = buildData(target ~ Lag(RSI3) + Lag(RSI3_SP) + Lag(dV)+Lag(DEMA10) + Lag(CCI20), na.rm=TRUE)
#model = specifyModel(target ~ Lag(RSI3) + Lag(RSI3_SP) + Lag(dV), na.rm=TRUE)
#m.built = buildModel(model, method = "randomForest", training.per = c('2011-01-01','2016-09-05'))
#z =tradeModel(m.built, plot.model = TRUE)
#getModelData(m.built)
# build a simple model
library(randomForest)
sd = as.data.frame(ts)
names(sd) = c("target","RSI","RSI_SPY","DV")
attach(sd)
sd$target = as.factor(ifelse(sd$target>0,1,0))
train = sample(1:nrow(ts), nrow(ts)*0.75)
sd.test=  sd [-train ,]
#ts.train = ts[train,]
tree.stk =randomForest(sd$target~., sd , subset =train, mtry = 2, importance = TRUE)
#plot(tree.stk)
summary(tree.stk)
tree.stk$confusion
#?randomForest
# TEST
tree.pred = predict ( tree.stk , sd.test)
res =table ( tree.pred , sd.test$target)
#??predict.randomForest
#UP acc:
res[2,2] / (res[2,2] + res[1,2])
#DOWN acc:
res[1,1] / (res[1,1] + res[2,1])
# ALL
tree.pred = predict ( tree.stk , sd)
res =table ( tree.pred , sd$target)
#??predict.randomForest
#UP acc:
res[2,2] / (res[2,2] + res[1,2])
#DOWN acc:
res[1,1] / (res[1,1] + res[2,1])
#??randomForest
result=rfcv(sd[,-1],sd$target,  cv.fold=10)
with(result, plot(n.var, error.cv, log="x", type="o", lwd=2))
#result <- replicate(5, rfcv(sd[,-1],sd$target,  cv.fold=10), simplify=FALSE)
#error.cv <- sapply(result, "[[", "error.cv")
#matplot(result[[1]]$n.var, cbind(rowMeans(error.cv), error.cv), type="l",
#        lwd=c(2, rep(1, ncol(error.cv))), col=1, lty=1, log="x",
#        xlab="Number of variables", ylab="CV Error")
ts
sd = as.data.frame(ts)
names(sd) = c("target","RSI","RSI_SPY","DV")
attach(sd)
sd$target = as.factor(ifelse(sd$target>0,1,0))
View(sd)
library(quantmod)
# load Magnit data
STK <- getSymbols("MAGN.ME", env=NULL)
SPY <- getSymbols("SPY", env=NULL)
#charting
chartSeries(STK,name="Magnet, RUB")
addRSI(n=10)
RSI3<-RSI(Ad(STK),n=10)
#RSI3 = ifelse(RSI3 > 80,1,ifelse(RSI3<20,-1,0))
CCI20<-CCI(Cl(STK),n=20)
DEMA10<-DEMA(Cl(STK),n = 10, v = 1, wilder = FALSE)
RSI3_SP<-RSI(Ad(SPY),n=10)
#RSI3_SP = ifelse(RSI3_SP > 80,1,ifelse(RSI3_SP<20,-1,0))
Delt(Cl(STK),Cl(STK),k=1:3)
dV = Vo(STK) - Lag(Vo(STK))
#target = OpCl(STK)
target = Delt(Cl(STK),Cl(STK),k=1)
#quantile(OpCl(STK), probs = seq(0, 1, 0.25), na.rm = FALSE)
ts = buildData(target ~ Lag(RSI3) + Lag(RSI3_SP) + Lag(dV)+Lag(DEMA10) + Lag(CCI20), na.rm=TRUE)
#model = specifyModel(target ~ Lag(RSI3) + Lag(RSI3_SP) + Lag(dV), na.rm=TRUE)
#m.built = buildModel(model, method = "randomForest", training.per = c('2011-01-01','2016-09-05'))
#z =tradeModel(m.built, plot.model = TRUE)
#getModelData(m.built)
# build a simple model
library(randomForest)
sd = as.data.frame(ts)
names(sd) = c("target","RSI","RSI_SPY","DV")
attach(sd)
sd$target = as.factor(ifelse(sd$target>0,1,0))
train = sample(1:nrow(ts), nrow(ts)*0.75)
sd.test=  sd [-train ,]
#ts.train = ts[train,]
tree.stk =randomForest(sd$target~., sd , subset =train, mtry = 2, importance = TRUE)
#plot(tree.stk)
summary(tree.stk)
tree.stk$confusion
#?randomForest
# TEST
tree.pred = predict ( tree.stk , sd.test)
res =table ( tree.pred , sd.test$target)
#??predict.randomForest
#UP acc:
res[2,2] / (res[2,2] + res[1,2])
#DOWN acc:
res[1,1] / (res[1,1] + res[2,1])
# ALL
tree.pred = predict ( tree.stk , sd)
res =table ( tree.pred , sd$target)
#??predict.randomForest
#UP acc:
res[2,2] / (res[2,2] + res[1,2])
#DOWN acc:
res[1,1] / (res[1,1] + res[2,1])
#??randomForest
result=rfcv(sd[,-1],sd$target,  cv.fold=10)
